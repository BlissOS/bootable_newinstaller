#!/bin/busybox sh
#
# By Chih-Wei Huang <cwhuang@linux.org.tw>
# and Thorsten Glaser <tg@mirbsd.org>
#
# Last updated 2017/03/24
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#

PATH=/su/bin:/sbin:/bin:/system/bin:/system/xbin; export PATH

# configure debugging output
if [ -n "$DEBUG" ]; then
	LOG=/tmp/log
	set -x
else
	LOG=/dev/null
	test -e "$LOG" || busybox mknod $LOG c 1 3
fi
exec 2>> $LOG

# early boot
if test x"$HAS_CTTY" != x"Yes"; then
	# initialise /proc and /sys
	busybox mount -t proc proc /proc
	busybox mount -t sysfs sys /sys
	# let busybox install all applets as symlinks
	busybox --install -s
	# spawn shells on tty 2 and 3 if debug or installer
	if test -n "$DEBUG" || test -n "$INSTALL"; then
		# ensure they can open a controlling tty
		mknod /dev/tty c 5 0
		# create device nodes then spawn on them
		mknod /dev/tty2 c 4 2 && openvt
		mknod /dev/tty3 c 4 3 && openvt
	fi
	if test -z "$DEBUG" || test -n "$INSTALL"; then
		echo 0 0 0 0 > /proc/sys/kernel/printk
	fi
	# initialise /dev (first time)
	mkdir -p /dev/block
	echo /sbin/mdev > /proc/sys/kernel/hotplug
	mdev -s
	# re-run this script with a controlling tty
	exec env HAS_CTTY=Yes setsid cttyhack /bin/sh "$0" "$@"
fi

# now running under a controlling tty; debug output from stderr into log file
# boot up Android

error()
{
	echo $*
	return 1
}

try_mount()
{
	RW=$1; shift
	if [ "${ROOT#*:/}" != "$ROOT" ]; then
		# for NFS roots, use nolock to avoid dependency to portmapper
		RW="nolock,$RW"
	fi
	# FIXME: any way to mount ntfs gracefully?
	mount -o $RW,noatime $@ || mount.ntfs-3g -o rw,force $@
}

check_root()
{
	if [ "`dirname $1`" = "/dev" ]; then
		[ -e $1 ] || return 1
		blk=`basename $1`
		[ ! -e /dev/block/$blk ] && ln $1 /dev/block
		dev=/dev/block/$blk
	else
		dev=$1
	fi
	if [ -b "/dev/$mnt" ]; then
		try_mount rw /dev/$mnt /mnt
	else
		try_mount rw $dev /mnt || return 1
	fi
	if [ -n "$iso" -a -e /mnt/$iso ]; then
		mount --move /mnt /iso
		mkdir /mnt/iso
		mount -o loop /iso/$iso /mnt/iso
		SRC=iso
	elif [ ! -e /mnt/$SRC/$RAMDISK ]; then
		if [ ! -d /mnt/$SRC/ramdisk ]; then
			return 1
		fi
	fi
	if [ -d /mnt/$SRC/ramdisk ]; then
		cd /
		if [ ! -e /mnt/$SRC/ramdisk/init ]; then
			cd android
			zcat /mnt/$SRC/$RAMDISK | cpio -id > /dev/null
			cd /
			cp -f -a /android/. /mnt/$SRC/ramdisk
		fi
		umount -l /android
		mount -o bind /mnt/$SRC/ramdisk /android
		cd android
	else
		zcat /mnt/$SRC/$RAMDISK | cpio -id > /dev/null
	fi
	if [ -e /mnt/$SRC/system.sfs ]; then
		mount -o loop,noatime /mnt/$SRC/system.sfs /sfs
		mount -o loop,noatime /sfs/system.img system
		if [ -e /mnt/system.img ]; then
			if [ -d /mnt/f2fs ]; then
				mount -t f2fs -o rw /mnt/system.img /mnt/f2fs
				cp -Rpf /android/system/. /mnt/f2fs
				umount /mnt/f2fs
				rm -r /mnt/f2fs
				mv /mnt/$SRC/system.sfs /mnt/$SRC/1system.sfs
				mksquashfs /mnt/system.img /mnt/$SRC/system.sfs
				rm /mnt/system.img
				umount /android/system
				umount /sfs
				mount -o loop,noatime /mnt/$SRC/system.sfs /sfs
				mount -o loop,noatime /sfs/system.img system
			fi
		fi
	elif [ -e /mnt/$SRC/system.img ]; then
		remount_rw
		mount -o loop,noatime /mnt/$SRC/system.img system
	elif [ -d /mnt/$SRC/system ]; then
		remount_rw
		mount --bind /mnt/$SRC/system system
	else
		rm -rf *
		return 1
	fi
	mount -o loop,noatime /mnt/modules.sfs system/lib/modules
	mount -o bind /mnt/modules system/lib/modules
	mount -o loop,noatime /mnt/firmware.sfs system/lib/firmware
	mount -o bind /mnt/firmware system/lib/firmware
	if [ -d /mnt/$SRC/su ]; then
		mkdir su
		mount --bind /mnt/$SRC/su su
		ln -s /android/su /su
	elif [ -e /mnt/$SRC/su.img ]; then
		mkdir su
		mount -o loop,noatime /mnt/$SRC/su.img su
		ln -s /android/su /su
	fi
	cp -f -a sbin/. su/sbin
	mount -o bind su/sbin sbin
	mount -o bind su/fstab.android_x86 fstab.android_x86
	mount -o bind su/fstab.android_x86_64 fstab.android_x86_64
	if [ ! -e "su/init.rc" ]; then
		cp init.rc su/init.rc
		echo "
# earliest possible SuperSU daemon launch, with fallback to service
on post-fs-data
    # HTC
    exec /sbin/launch_daemonsu.sh post-fs-data
    # Proper devices
    exec u:r:init:s0 root root -- /sbin/launch_daemonsu.sh post-fs-data

# launch SuperSU daemon
service daemonsu /sbin/launch_daemonsu.sh service
    class late_start
    user root
    seclabel u:r:init:s0
    oneshot

# Triggers

on post-fs
    start magisk_pfs
    wait /dev/.magisk.unblock 20
    rm /dev/.magisk.unblock

on post-fs-data
    start magisk_pfsd
    wait /dev/.magisk.unblock 40
    rm /dev/.magisk.unblock

on property:magisk.restart_pfsd=1
    trigger post-fs-data

# Services

# launch post-fs script
service magisk_pfs /sbin/magic_mask.sh post-fs
    user root
    seclabel u:r:su:s0
    oneshot

# launch post-fs-data script
service magisk_pfsd /sbin/magic_mask.sh post-fs-data
    user root
    seclabel u:r:su:s0
    oneshot

# launch late_start script
service magisk_service /sbin/magic_mask.sh service
    class late_start
    user root
    seclabel u:r:su:s0
    oneshot
" >> su/init.rc
	fi
	mount -o bind su/init.rc init.rc
	if [ ! -e "su/build.prop" ]; then
		cp system/build.prop su/build.prop
		echo "ro.sf.lcd_density=240
sleep.earlysuspend=0
sleep.state=disabled" >> su/build.prop
	fi
	mount -o bind su/build.prop system/build.prop
	mount -o bind su/etc/init.sh system/etc/init.sh
	mount -o bind su/etc/modules.blacklist system/etc/modules.blacklist
	mount -o bind su/lib/egl system/lib/egl
	mount -o bind su/lib/dri system/lib/dri
	if [ -b "/dev/$system" ]; then
		umount -l system
		busybox mount -o noatime /dev/$system system
	fi
	mkdir -p mnt
	echo " found at $1"
	rm /sbin/mke2fs
	hash -r
}

remount_rw()
{
	# "foo" as mount source is given to workaround a Busybox bug with NFS
	# - as it's ignored anyways it shouldn't harm for other filesystems.
	mount -o remount,rw foo /mnt
}

debug_shell()
{
	if [ -x system/bin/sh ]; then
		if [ 0$DEBUG -gt 1 ]; then
			echo Running MirBSD Korn Shell...
			USER="($1)" system/bin/sh -l 2>&1
		fi
	else
		echo Running busybox ash...
		sh 2>&1
	fi
}

echo -n Detecting Android-x86...

[ -z "$SRC" -a -n "$BOOT_IMAGE" ] && SRC=`dirname $BOOT_IMAGE`
[ -z "$RAMDISK" ] && RAMDISK=ramdisk.img

for c in `cat /proc/cmdline`; do
	case $c in
		iso-scan/filename=*)
			eval `echo $c | cut -b1-3,18-`
			;;
		*)
			;;
	esac
done

mount -t tmpfs tmpfs /android
cd /android
while :; do
	for device in ${ROOT:-/dev/[hmsv][dmr][0-9a-z]*}; do
		check_root $device && break 2
		mountpoint -q /mnt && umount /mnt
	done
	sleep 1
	echo -n .
done

ln -s mnt/$SRC /src
ln -s android/system /
ln -s ../system/lib/firmware ../system/lib/modules /lib
touch /.ash_history
mount -o bind /mnt/.ash_history /.ash_history

if [ -n "$INSTALL" ]; then
	zcat /src/install.img | ( cd /; cpio -iud > /dev/null )
fi

if [ -x system/bin/ln -a \( -n "$DEBUG" -o -n "$BUSYBOX" \) ]; then
	mv /bin /lib .
	sed -i 's|\( PATH.*\)|\1:/bin|' init.environ.rc
	rm /sbin/modprobe
	busybox mv /sbin/* sbin
	rmdir /sbin
	ln -s android/bin android/lib android/sbin /
	hash -r
fi

# ensure keyboard driver is loaded
[ -n "$INSTALL" -o -n "$DEBUG" ] && busybox modprobe -a atkbd hid-apple

if [ 0$DEBUG -gt 1 ]; then
	echo -e "\nType 'exit' to continue booting...\n"
	debug_shell debug-found
fi

# load scripts
for s in `ls /scripts/* /src/scripts/*`; do
	test -e "$s" && source $s
done

# A target should provide its detect_hardware function.
# On success, return 0 with the following values set.
# return 1 if it wants to use auto_detect
[ "$AUTO" != "1" ] && detect_hardware && FOUND=1

[ -n "$INSTALL" ] && do_install

load_modules
mount_data
mount_sdcard
create_su
check_ota
convert_f2fs
setup_tslib
setup_dpi
post_detect

if [ 0$DEBUG -gt 1 ]; then
	echo -e "\nUse Alt-F1/F2/F3 to switch between virtual consoles"
	echo -e "Type 'exit' to enter Android...\n"

	debug_shell debug-late
	SETUPWIZARD=${SETUPWIZARD:-0}
fi

[ "$SETUPWIZARD" = "0" ] && echo "ro.setupwizard.mode=DISABLED" >> default.prop

[ -n "$DEBUG" ] && SWITCH=${SWITCH:-chroot}

# We must disable mdev before switching to Android
# since it conflicts with Android's init
echo > /proc/sys/kernel/hotplug

export ANDROID_ROOT=/system

exec ${SWITCH:-switch_root} /android /init

# avoid kernel panic
while :; do
	echo
	echo '	Android-x86 console shell. Use only in emergencies.'
	echo
	debug_shell fatal-err
done
