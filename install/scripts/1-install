#
# By 
#  Chih-Wei Huang   <cwhuang@linux.org.tw>
#  Yu Chen          <yuchen@tsinghua.edu.cn>
# Last updated 2016/08/06
#
# License: GNU Public License
# We explicitely grant the right to use the scripts
# with Android-x86 project.
#
CMD=""
tempfile=/tmp/temp-$$
menufile=/tmp/menu-$$
MOUNT="/mnt/data"
CPIO=cpio
try_mount()
{
	RW=$1; shift
	if [ "${ROOT#*:/}" != "$ROOT" ]; then
		# for NFS roots, use nolock to avoid dependency to portmapper
		RW="nolock,$RW"
	fi
	# FIXME: any way to mount ntfs gracefully?
	mount -o $RW $@ || mount -t ntfs -o rw,force $@
}

rebooting()
{
	dialog --title " Rebooting... " --nocancel --pause "" 8 41 1
	sync
	umount -a
	reboot -f
}

choose()
{
	dialog --clear --title " $1 " \
		--menu "$2" 20 71 13 --file $menufile 2> $tempfile

	retval=$?
	choice=`cat $tempfile`
}

partition_drive()
{
	echo partition_drive ...
	
	echo -n > $menufile
	for i in /sys/block/[shv]d[a-z] /sys/block/mmcblk?; do
		if [ ! -d $i ]; then  # pathname expansion failed
			continue
		fi
		echo -n `basename $i` >> $menufile
		if [ -f $i/removable -a `cat $i/removable` -eq 0 ]; then
			echo -n ' "Harddisk ' >> $menufile
		else
			echo -n ' "Removable' >> $menufile
		fi
		if [ -f $i/size ]; then
			echo -n " (" `cat $i/size` "blocks)" >> $menufile
		fi
		echo '"' >> $menufile
	done
	count=`wc -l $menufile | awk '{ print $1 }'`
	if [ $count -eq 0 ]; then
		dialog --title " Error " --msgbox \
			"\nOK. There is no hard drive to edit partitions." 8 49
		return 255
	fi
	if [ $count -eq 1 ]; then
		choice=`awk '{ print $1 }' $menufile`
		retval=0
	else
		choose "Choose Drive" "Please select a drive to edit partitions:"
	fi
	if [ $retval -eq 0 ]; then
		dialog --title " Confirm " --yesno "\n Do you want to use GPT?" 7 29
		if [ $? -eq 0 ]; then
			cgdisk /dev/$choice
		else
			cfdisk /dev/$choice
		fi
		if [ $? -eq 0 ]; then
			retval=1
		else
			retval=255
		fi
	fi
	return $retval
}
format_fs()
{
	local cmd
	if [ $2 = "data" ];then
		echo -e '"Do not format" ""\next4 ""\next3 ""\next2 ""\nntfs ""' > $menufile
	elif [ $2 == "system" ];then
		echo -e '"Do not format" ""\next4 ""\next3 ""\next2 ""' > $menufile
	elif [ $2 = "efi" ];then
		echo -e '"Do not format" ""\nfat32 ""' > $menufile
	fi
	choose "Choose filesystem" "Please select a filesystem to format $1:"
	case "$choice" in
		ext4)
			cmd="make_ext4fs"
			;;
		ext3)
			cmd="mke2fs -j"
			;;
		ext2)
			cmd="mke2fs"
			;;
		ntfs)
			cmd="mkntfs -f"
			;;
		fat32)
			cmd="mkdosfs"
			;;
		*)
			;;
	esac
	if [ -n "$cmd" ]; then
		dialog --title " Confirm "  --yesno \
			"\n You chose to format $1 to $choice.\n All data in that partition will LOSE.\n\n Are you sure to format the partition $1?" 10 51
		[ $? -ne 0 ] && return 1
		if [ $2 = "efi" ];then
			$cmd -n EFI /dev/$1 | awk '{
				# FIXME: very imprecise progress
				if (match($0, "done"))
					printf("%d\n", i+=33)
			}' | progress_bar "Formatting" "Formatting partition $1..."
		elif [ $2 = "system" ];then
			$cmd /dev/$1 | awk '{
				# FIXME: very imprecise progress
				if (match($0, "done"))
					printf("%d\n", i+=33)
			}' | progress_bar "Formatting" "Formatting partition $1..."
		elif [ $2 = "data" ];then
			$cmd /dev/$1 | awk '{
				# FIXME: very imprecise progress
				if (match($0, "done"))
					printf("%d\n", i+=33)
			}' | progress_bar "Formatting" "Formatting partition $1..."
		fi
	fi
}

select_dev()
{
	echo select_dev ...
	
	blkid | grep -v -E "^/dev/block/|^/dev/loop" | cut -b6- | sort | awk '{
		t="unknown"
		for (i = NF; i > 1; --i)
			if (match($i, "^TYPE")) {
				t=$i
				break
			}
		gsub(/TYPE=|"/, "", t)
		printf("%s\t%s\n", $1, t)
	}' > $tempfile

	lsblk=`ls /sys/block | grep -v -E "loop|ram|sr|boot|rpmb"`
	for d in $lsblk; do
		p=0
		for i in /sys/block/$d/$d* /sys/block/$d; do
			[ -e $i/partition ] && p=1
			[ $p -eq 1 -a "$i" = "/sys/block/$d" ] && break
			echo $i | grep -q -E "boot|rpmb" && continue
			[ -d $i ] && ( grep "`basename $i:`" $tempfile || echo "`basename $i` unknown" )
		done
	done | awk '{
		sub(/:/, "", $1)
		printf("\"%-13s%-17s", $1, $2)
		system("cd /sys/block; for f in "$1"/device/model "$1"/device/name */"$1"/../device/model */"$1"/../device/name; do [ -e $f ] && echo -n `cat $f` && break; done")
		printf("\" \"\"\n")
	} END {
		printf("\"Create/Modify partitions\" \"\"\n\"Detect devices\" \"\"")
	}' > $menufile
	choose "Choose Partition" "Please select a partition to install OPENTHOS EFI partition:"
	return $retval
}
select_data_dev()
{
	echo select_data_dev ...
	
	blkid | grep -v -E "^/dev/block/|^/dev/loop" | cut -b6- | sort | awk '{
		t="unknown"
		for (i = NF; i > 1; --i)
			if (match($i, "^TYPE")) {
				t=$i
				break
			}
		gsub(/TYPE=|"/, "", t)
		printf("%s\t%s\n", $1, t)
	}' > $tempfile

	lsblk=`ls /sys/block | grep -v -E "loop|ram|sr|boot|rpmb"`
	for d in $lsblk; do
		p=0
		for i in /sys/block/$d/$d* /sys/block/$d; do
			[ -e $i/partition ] && p=1
			[ $p -eq 1 -a "$i" = "/sys/block/$d" ] && break
			echo $i | grep -q -E "boot|rpmb" && continue
			[ -d $i ] && ( grep "`basename $i:`" $tempfile || echo "`basename $i` unknown" )
		done
	done | awk '{
		sub(/:/, "", $1)
		printf("\"%-13s%-17s", $1, $2)
		system("cd /sys/block; for f in "$1"/device/model "$1"/device/name */"$1"/../device/model */"$1"/../device/name; do [ -e $f ] && echo -n `cat $f` && break; done")
		printf("\" \"\"\n")
	} END {
	}' > $menufile
	choose "Choose Partition" "Please select a partition to install OPENTHOS DATA:"
	return $retval
}

select_system_dev()
{
	blkid | grep -v -E "^/dev/block/|^/dev/loop" | cut -b6- | sort | awk '{
		t="unknown"
		for (i = NF; i > 1; --i)
			if (match($i, "^TYPE")) {
				t=$i
				break
			}
		gsub(/TYPE=|"/, "", t)
		printf("%s\t%s\n", $1, t)
	}' > $tempfile

	lsblk=`ls /sys/block | grep -v -E "loop|ram|sr|boot|rpmb"`
	for d in $lsblk; do
		p=0
		for i in /sys/block/$d/$d* /sys/block/$d; do
			[ -e $i/partition ] && p=1
			[ $p -eq 1 -a "$i" = "/sys/block/$d" ] && break
			echo $i | grep -q -E "boot|rpmb" && continue
			[ -d $i ] && ( grep "`basename $i:`" $tempfile || echo "`basename $i` unknown" )
		done
	done | awk '{
		sub(/:/, "", $1)
		printf("\"%-13s%-17s", $1, $2)
		system("cd /sys/block; for f in "$1"/device/model "$1"/device/name */"$1"/../device/model */"$1"/../device/name; do [ -e $f ] && echo -n `cat $f` && break; done")
		printf("\" \"\"\n")
	} END {
	}' > $menufile
	choose "Choose Partition" "Please select a partition to install OPENTHOS System:"
	return $retval
}
progress_bar()
{
	dialog --clear --title " $1 " --gauge "\n $2" 8 70
}


create_entry()
{
	title=$1
	shift
	echo -e "title $title\n\tkernel /$asrc/kernel$vga $@ SRC=/$asrc\n\tinitrd /$asrc/initrd.img\n" >> $menulst
}

create_newest_entry()
{
	title=$1
	shift
	echo -e "title $title\n\tkernel /$newasrc/kernel$vga $@ SRC=/$newasrc\n\tinitrd /$newasrc/initrd.img\n" >> $menulst
}


create_menulst()
{
	menulst=/hd/grub/menu.lst
	[ -n "$VESA" ] && vga=" vga=788 modeset=0"
	echo -e "${GRUB_OPTIONS:-default=0\ntimeout=6\nsplashimage=/grub/android-x86.xpm.gz\n}root (hd0,$1)\n" > $menulst

	create_entry "OPENTHOS $VER" $cmdline
	create_entry "OPENTHOS $VER (Debug mode)" $cmdline console=ttyS0 DEBUG=2
	create_newest_entry "OPENTHOS Newest" $cmdline
	create_Newest_entry "OPENTHOS Newest (Debug mode)" $cmdline console=ttyS0 DEBUG=2
}

create_winitem()
{
	win=`fdisk -l /dev/$(echo $1 | cut -b-3) | grep ^/dev | cut -b6-12,55- | awk '{
		if (match($2, "NTFS"))
			print $1
	}' | head -1`
	if [ -n "$win" ]; then
		dialog --title " Confirm " --yesno \
			"\nThe installer found a Windows partition in /dev/$win.\n\nDo you want to create a boot item for Windows?" 9 59
		[ $? -ne 0 ] && return 1
		wp=$((`echo $win | cut -b4-`-1))
		echo -e "title Windows\n\trootnoverify (hd$d,$wp)\n\tchainloader +1\n" >> $menulst
	fi
}

create_boto_img()
{
	bname=`basename $2`
	if [ -e $2 ]; then
		dialog --title " Confirm "  --yesno \
			"\n $bname exists. Overwrite it?" 7 38
		[ $? -ne 0 ] && return 255
		rm -f $2
	fi
	dialog --title " Question " --nook --nocancel --inputbox \
		"\nPlease input the size of the $bname in GB (max 100):" 8 63 $1 2> $tempfile
	size=`cat $tempfile`
	[ 0$size -le 0 -o 0$size -gt 100 ] && size=100
	size=`expr $size \* 1024`
	dd if=/dev/zero of=$2 bs=1 count=0 seek=$size"M"
	#( dd bs=1M count=$size if=/dev/zero | pv -ns ${size}m | dd of=$2 ) 2>&1 \
	#	| progress_bar "Creating $bname" "Expect to write $size MB..."
}

create_boto_data_img()
{
	dialog --title " Confirm " --yesno \
		"\nThe installer is going to create a disk image to save the user data.\ndefault space is 20G.\n\nAre you sure to create the image?" 11 62
	if [ $? -eq 0 ]; then
		create_boto_img 20 $MOUNT/openthos/data.img
		losetup /dev/loop6 $MOUNT/openthos/data.img
		make_ext4fs -L /data /dev/loop6 > /dev/tty6
		[ $? -ne 0 ] && dialog --msgbox "\n Failed to create data.img." 7 33
	else
		dialog --title " Warning " --msgbox \
			"\nOK. So data will be save to a RAMDISK(tmpfs), and lose after power off." 8 49
	fi
}

get_part_info()
{
	d=0
	while [ 1 ]; do
		h=`echo $d | awk '{ printf("%c", $1+97) }'`
		for part in /sys/block/[shv]d$h/$1 /sys/block/mmcblk$d/$1; do
			[ -d $part ] && break 2
		done
		d=$(($d+1))
	done
	p=`cat $part/partition`
	disk=$(basename `dirname $part`)
}

boto_install_to()
{
	echo boto_install_to ...
	#format install dev and mount to /hd
	cd /
	mountpoint -q /hd && umount /hd
	while [ 1 ]; do
		format_fs $1 efi
		try_mount rw /dev/$1 /hd && break
		dialog --clear --title " Error "  --yesno \
			"\n Cannot mount /dev/$1\n Do you want to format it?" 8 37
		[ $? -ne 0 ] && return 255
	done

	asrc="OpenThos"
	SRC="livemedia/OpenThos"

	#dialog --title " Confirm " --no-label Skip  --yesno \
	#	"\n Do you want to install OpenThos" 7 39
	#install refind tool
	tar -xvf /mnt/$SRC/efi.tar.bz2 -C /hd/ > /dev/null

	UUID=`blkid /dev/$1|awk -F "UUID" '{print $2;}'|awk -F "\"" '{print $2;}'`
	grubcfg=/hd/efi/boot/refind.conf	
	echo -e "menuentry openthos {" >> $grubcfg
	echo -e "\ticon EFI/boot/themes/boto/os_openthos.png" >> $grubcfg
	echo -e "\tvolume $UUID" >> $grubcfg
	echo -e "\tloader OpenThos/kernel" >> $grubcfg
	echo -e "\tinitrd OpenThos/initrd.img" >> $grubcfg
	CMD="options \"quiet androidboot.hardware=android_x86_64 BOOT_MODE=hdboot RAMDISK_HD_UUID=$UUID RAMDISK_IMG=OpenThos/ramdisk.img "
	
	#extract image file to install device
	files="/mnt/$SRC/kernel /mnt/$SRC/initrd.img /mnt/$SRC/ramdisk.img"

	mkdir -p hd/$asrc
	cp $files /hd/$asrc/ -rf

	dialog --infobox "\n Syncing installtion efi partition to disk..." 5 50
	sleep 1
	sync

	return $result
}
boto_install_hd()
{
	echo boto_install_hd...

	select_dev || rebooting
	retval=1
	case "$choice" in
		[shvm][dm]*)
			boto_install_to $choice
			retval=$?
			;;
		Create*)
			partition_drive
			retval=$?
			;;
		Detect*)
			dialog --title " Detecting... " --nocancel --pause "" 8 41 1
			;;
	esac
	return $retval
}

boto_data_install_to()
{
	echo "store your data to..."

	cd /
	mkdir $MOUNT
	while [ 1 ]; do
		format_fs $1 data
		if [ `blkid /dev/$1|awk -F "TYPE" '{print $2;}'|awk -F "\"" '{print $2;}'` = "ntfs" ];then
			mount.ntfs-3g /dev/$1 $MOUNT && break
		else
			try_mount rw /dev/$1 $MOUNT && break
		fi
		dialog --clear --title " Error "  --yesno \
			"\n Cannot mount /dev/$1\n Do you want to format it?" 8 37
	done
	mkdir $MOUNT/openthos
	#create_boto_data_img

	UUID=`blkid /dev/$1|awk -F "UUID" '{print $2;}'|awk -F "\"" '{print $2;}'`
	grubcfg=/hd/efi/boot/refind.conf	
	CMD="$CMD DATA_HD_UUID=$UUID\""
	echo $CMD >> $grubcfg
	echo -e "\n}" >> $grubcfg

	dialog --infobox "\n Syncing data to disk..." 5 30
	sleep 1
	sync
}
boto_install_data_hd()
{
	echo boto_install_data_hd ...

	select_data_dev || rebooting
	retval=1
	case "$choice" in
		[shvm][dm]*)
			boto_data_install_to $choice
			retval=$?
			;;
	esac
	return $retval
}
boto_system_install_to()
{
	format_fs $1 system
	if [ -e /mnt/$SRC/system.sfs ]; then
		mkdir /sfs/sfs -p
		mkdir /sfs/system -p
                mount -o loop /mnt/$SRC/system.sfs /sfs/sfs
		mount -o loop /sfs/sfs/system.img /sfs/system
        fi
	mount /dev/$1 /iso
	cp -af /sfs/system/* /iso/ &
	#This progress bar is fake
	i=0;while [[ $i -lt 100 ]];do echo $i;i=`expr $i + 1`;sleep 0.1;done | dialog --title "copying System file" --gauge "copying......" 7 30

	UUID=`blkid /dev/$1|awk -F "UUID" '{print $2;}'|awk -F "\"" '{print $2;}'`
	grubcfg=/hd/efi/boot/refind.conf	
	CMD="$CMD SYSTEM_HD_UUID=$UUID "
}
boto_install_system_hd()
{
	

	select_system_dev || rebooting
	retval=1
	case "$choice" in
		[shvm][dm]*)
			boto_system_install_to $choice
			retval=$?
			;;
	esac
	return $retval
}

hd_install()
{
	echo do_install_boto ...
    # for newest android boot entry
	newasrc=androidnewest
	until boto_install_hd; do
		if [ $retval -eq 255 ]; then
			dialog --title ' Error! ' --yes-label Retry --no-label Reboot \
				--yesno '\nInstallation failed! Please check if you have enough free disk space to install OPENTHOS.' 8 51
			[ $? -eq 1 ] && rebooting
		fi
	done
	until boto_install_system_hd; do
		if [ $retval -eq 255 ]; then
			dialog --title ' Error! ' --yes-label Retry --no-label Reboot \
				--yesno '\nInstallation system failed!' 8 51
			[ $? -eq 1 ] && rebooting
		fi
	done
	until boto_install_data_hd; do
		if [ $retval -eq 255 ]; then
			dialog --title ' Error! ' --yes-label Retry --no-label Reboot \
				--yesno '\nInstallation data failed!' 8 51
			[ $? -eq 1 ] && rebooting
		fi
	done
	#begin reboot system
	sum=5;while [[ sum -gt 0 ]];do echo $sum;sum=`expr $sum - 1`;dialog --title " REBOOTING OPENTHOS" --infobox "\n        $sum" 7 30 ;sleep 1; done
	rebooting
}
